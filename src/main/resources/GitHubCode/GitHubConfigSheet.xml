<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>GitHubCode</web>
<name>GitHubConfigSheet</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>SVNCode.SVNConfigClass</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1262300400000</creationDate>
<date>1262300400000</date>
<contentUpdateDate>1262300400000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.SheetClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<defaultEditMode>
<disabled>0</disabled>
<name>defaultEditMode</name>
<number>1</number>
<prettyName>Default Edit Mode</prettyName>
<size>15</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</defaultEditMode>
</class>
<name>GitHubCode.GitHubConfigSheet</name>
<number>0</number>
<className>XWiki.SheetClass</className>
<guid>a4338244-ae06-44ec-9645-7de7ec245282</guid>
<property>
<defaultEditMode></defaultEditMode>
</property>
</object>
<content>{{velocity}}
#if ("$!request.action" == "compare")
= $msg.get('github.configsheet.compare.title'): $request.page =
#else
= $msg.get("github.configsheet.title"): $doc.name =
#end

#if(!$xwiki.hasProgrammingRights())
#warning("This application cannot work without programming rights on the current page. Resave this page as an admin and retry.")
#else

#if(!$request.action)
#set($class = $doc.getObject('GitHubCode.GitHubConfigClass').xWikiClass)
#set($authobj = $doc.getObject("GitHubCode.GitHubAuthClass", "contextuser", $context.user))
#if(!$authobj)
 #set($authobj = $doc.newObject("GitHubCode.GitHubAuthClass"))
 #if($context.action=="inline")
  #set($ok = $doc.use($authobj))
  #set($ok = $doc.set("contextuser", $context.user))
  #set($ok = $doc.use("GitHubCode.GitHubConfigClass")) 
  #set($ok = $doc.save())
 #end
#end
#foreach($prop in $class.properties)
 #if($prop.name=="username")
  #set($ok = $doc.use($authobj))
  **$doc.displayPrettyName("username")**
  $doc.display("username")
  #if($context.action=="inline")
   **$doc.displayPrettyName("password")**
   $doc.display("password")
   #set($ok = $doc.set("contextuser", $context.user))
   $doc.display("contextuser", "hidden")
  #end
  #set($ok = $doc.use("GitHubCode.GitHubConfigClass"))
 #elseif($prop.name!="username"&amp;&amp;$prop.name!="password")
 #set($tooltip = $prop.propertyClass.getTooltip($context.context))
  **$doc.displayPrettyName($prop.name)** #if($tooltip!="GitHubCode.GitHubConfigClass_${prop.name}_tooltip")//(${tooltip})//#end

#if($context.action=="inline"&amp;&amp;$prop.name=="savedlist")
  #set($path = $xwiki.getURL("GitHubCode.SavedListSuggest", "view"))
  #set($script = $path + "?xpage=plain&amp;outputSyntax=plain&amp;")
{{html clean=false}}
&lt;input type="text" id="GitHubCode.GitHubConfigClass_0_savedlist" name="GitHubCode.GitHubConfigClass_0_savedlist" onfocus="tsuggest(this);" value="$!doc.getValue("savedlist")" /&gt;
&lt;script type="text/javascript"&gt;
// &lt;![CDATA[
function tsuggest(field) {
  if (!field.suggest) {
   field.suggest = new ajaxSuggest(field, {script:'$script', varname: 'input', seps:'', offsety: 13, 
                                   callback: function(obj) { field.value=obj.info;} });
   field.suggest.options.timeout = 5000;
  }
}
// ]]&gt;
&lt;/script&gt;
{{/html}}
#else
   $doc.display($prop.getName())
#end
#end
#end
#end
#set($configLoaded = "")
#if($request.action)
#set($githubgroovy = $xwiki.parseGroovyFromPage("GitHubCode.GitHubGroovy","GitHubCode.GitHubGroovy"))
#set($ok = $githubgroovy.setXWiki($xwiki, $context))
#if(!$githubgroovy.hasProgrammingRights())
#warning("This application cannot work without programming rights on [[GitHubCode.GitHubGroovy]]. Resave this page as an admin and retry.")
#end
#set($configLoaded = $githubgroovy.setGitHubConfig($doc.fullName))
#if($request.spaces)
 #set($spaces = $request.spaces)
 #set($savedlist = "")
#else
 #set($savedlist = $githubgroovy.getSavedList())
 #set($spaces = $githubgroovy.getDefaultSpace())
#end
#end
#if($configLoaded!="")
## it was not possible to connect to github
$configLoaded
#else
## CUSTOM action
#if($request.action=="custom")
{{html wiki=true clean=false}}
&lt;form action="" method="get"&gt;
&lt;input type="hidden" name="action" value="list" /&gt;
  $msg.get("github.configsheet.custom.spacelist"): &lt;input type="text" name="spaces" value="" /&gt;&lt;input type="submit" value="$msg.get("github.configsheet.listpages")" /&gt;
&lt;/form&gt;
&lt;form action="" method="get"&gt;
&lt;input type="hidden" name="action" value="list" /&gt;
  $msg.get("github.configsheet.custom.space"): &lt;select name="spaces"&gt;
#foreach($space in $xwiki.spaces)
 &lt;option value="$space"&gt;$space&lt;/option&gt;
#end
&lt;/select&gt;
&lt;input type="submit" value="$msg.get("github.configsheet.listpages")" /&gt;
&lt;/form&gt;
{{/html}}  
## LIST ACTION
#elseif($request.action=="list")
{{html wiki=true}}
&lt;form action="$doc.name"  method="post"&gt;
&lt;input type="hidden" name="action" value="commit" /&gt;
&lt;input type="hidden" name="spaces" value="$!{spaces}" /&gt;
&lt;ul&gt;
#set($cmap = $!githubgroovy.getChangedPages($spaces, $savedlist))
#foreach($page in $cmap.keySet())
 #set($status = $cmap.get($page))
 ## encode the language of the document after the document name, after a dot. Will be processed on commit
&lt;li&gt;$status.status &lt;input type="checkbox" name="page" value="${status.fullname}.$!{status.language}" /&gt; ${page}
&lt;input type="hidden" name="${status.fullname}.$!{status.language}_sha" value="${status.githubsha}" /&gt;
#if($status.status!="N")
[[$msg.get("github.configsheet.viewdiff")&gt;&gt;${doc.fullName}?action=compare&amp;page=${status.fullname}&amp;githublanguage=${status.language}&amp;spaces=$!{spaces}&amp;githubsha=${status.githubsha}||target=_blank]]
#end
#end
&lt;/ul&gt;
&lt;input type="submit" name="commit" value="$msg.get("github.configsheet.commitall")" /&gt; &lt;input type="submit" name="update" value="$msg.get("github.configsheet.updateall")" /&gt; &lt;input type="submit" name="export" value="$msg.get("github.configsheet.exportall")" /&gt;
&lt;/form&gt;
{{/html}}
#elseif($request.export)
#set($pagelist = $xwiki.arrayList)
#foreach($page in $request.getParameterValues("page"))
#set($ok = $pagelist.add($page))
#end
$githubgroovy.exportPages($doc.name, $pagelist)
#set($ok = $context.setFinished(true))
#elseif($request.update)
#set($pagelist = $xwiki.arrayList)
#foreach($page in $request.getParameterValues("page"))
#set($ok = $pagelist.add({ "page" : $page, "sha" : $request.get("${page}_sha")}))
#end
#set($list = $githubgroovy.updatePages($pagelist))

$msg.get("github.configsheet.pagesupdated")

#foreach($page in $list.keySet())
* $page
#end

[[$msg.get("github.configsheet.backtolist")&gt;&gt;${doc.fullName}?action=list]] - [[$msg.get("github.configsheet.backtocustom")&gt;&gt;${doc.fullName}?action=custom]]

## COMMIT ACTION with confirm
#elseif($request.action=="commit" &amp;&amp; $request.confirm=="1")
$msg.get("github.configsheet.committingpages"):

#set($pagelist = $xwiki.arrayList)
#foreach($page in $request.getParameterValues("page"))
 * $page
#set($ok = $pagelist.add($page))
#end

$githubgroovy.commitFiles($pagelist, $request.message, $!request.pom)

$msg.get("github.configsheet.committsuccessfull")


[[$msg.get("github.configsheet.backtolist")&gt;&gt;${doc.fullName}?action=list]] - [[$msg.get("github.configsheet.backtocustom")&gt;&gt;${doc.fullName}?action=custom]]

## COMMIT ACTION before confirm
#elseif($request.action=="commit")
## confirm commit
$msg.get("github.configsheet.confirmcommittingpage")

{{html wiki=true}}
&lt;form action="$doc.name" method="post"&gt;
&lt;input type="hidden" name="action" value="commit" /&gt;
&lt;input type="hidden" name="confirm" value="1" /&gt;
&lt;input type="hidden" name="spaces" value="$!{spaces}" /&gt;
## just pass the pages to commit further
#foreach($page in $request.getParameterValues("page"))
* $page
&lt;input type="hidden" name="page" value="$!{page}" /&gt;
#end

$msg.get("github.configsheet.commitmessage"):
&lt;br /&gt;
&lt;textarea name="message" rows="5" cols="80"&gt;
&lt;/textarea&gt;
&lt;br /&gt;
&lt;input type="checkbox" name="pom" value="1" /&gt; $msg.get("github.configsheet.commitpom")
&lt;br /&gt;
&lt;input type="submit" value="Commit" /&gt;
&lt;/form&gt;
{{/html}}
## VIEW STATUS ACTION
#elseif($request.action=="status")

$githubgroovy.getCommitStatus("|", "|", false)

## VIEW STATUS ACTION
#elseif($request.action=="compare")
{{html clean=false}}
#set($pagedoc = $xwiki.getDocument($request.page))
#if($request.githublanguage)
#set($pagedoc = $pagedoc.getTranslatedDocument($request.githublanguage))
#end
$githubgroovy.showXMLDiff($pagedoc, $request.githubsha)
{{/html}}

## OTHER ACTION
#else

[[$msg.get("github.configsheet.listpages")&gt;&gt;${doc.fullName}?action=list]] - [[$msg.get("github.configsheet.customlist")&gt;&gt;${doc.fullName}?action=custom]]
#end

#end ## end set config failed

#if($request.action)
$msg.get("github.configsheet.debug"):

$githubgroovy.getDebug()
#end
#end
{{/velocity}}
</content></xwikidoc>